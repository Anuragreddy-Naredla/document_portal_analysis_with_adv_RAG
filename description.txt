1. create virtual environment.

    -> conda create -p env python=3.10 -y
    -> conda activate env
    -> To check type "pip list"

2. Create the github and commit the files.

    -> git init
    -> give commit and click on Publish Branch

3. To install the requirements.

    -> pip install -r requirements.txt

#### Min requirement for this project ####
1. LLM Model(GROQ[freely],openai[paid],gemini[15days free access], claude[paid], huggingface[freely], Ollama[local setup])
2. Embedding Model (openai, huggingface, gemini)
3. vectordatabase
    -> 3variants of database
        a. inmemory database
        b. ondisk database
        c. cloudbase database

### COMMANDS ###
1. pip list
2. pip install -e .
    -> It will create the document_portal_analysis_with_adv_RAG as the package and also we can publish to pypi 
3. pip list
    -> we can see the document_portal_analysis_with_adv_RAG as package under env which is virtual environment
4. pip install -r requirements.txt
    -> To Install all the libraries.

### API KEYS ###
1. Groq api key.
    -> Go to the groq website https://console.groq.com/keys
    -> Go to API keys tab
    -> Click on Create API Key and copy and paste and give in the .env file
        (GROQ_API_KEY="GIVE YOUR API KEY HERE")
        
2. Google API KEY
    -> Go to the google ai studio website and create the api key. https://aistudio.google.com/prompts/new_chat
    -> click on Create API key and copy and paste under the .env file as 
        (GOOGLE_API_KEY="GIVE YOUR API KEY HERE")

TO TEST THE UI FROM VSCODE:
1. Download "live server" extension from vscode.
2. Right click on "index.html" click on "Open with Live Server".



#WITH COMMAND
1. set LLM_PROVIDER=google
1. cd api/
2. uvicorn main:app --reload 
3. uvicorn api.main:app --port 8083 --reload[If we want to run from ROOT folder we can use this command,
                                            api->folder name, main->python filename,app->fastapi]
        (OR)
   uvicorn api.main:app --host 0.0.0.0 --port 8080 --reload



# FOR CREATING ANOTHER BRANCH AND SWITCH #####
    -> In master branch only we will deploy this app'n
1. git checkout -b dev (We will create a dev branch with this command)
2. git switch dev
3. git  switch master

#FOR CREATING THE DOCKER IMAGE IN LOCAL i.e, in "Docker Desktop app" Type below commands in CMD#
1. docker build -t document-portal-system-with-rag .
    -> -t which means tag, 
    -> .=>Where the dockerfile available
    -> document-portal-system-with-rag => name of the docker image
2. docker images
    -> We can see all the images which was build on docker.
3. docker run -d -p 8093:8080 --name doc-portal-app document-portal-system-with-rag
    -> -d=>detachmode which means in background everything will run
    -> -p=>publish
    -> 8093=>Port in local system
    -> 8080=>container port
    -> --name doc-portal-app =>name of my container.
    -> document-portal-system-with-rag=>This is the image name

4. To check write below commad in browser
    -> http://localhost:8093/



##### Steps for running the App over the ECS:#####


1. pull my latest entire code
1.1 you will updated githubaction/workflow folder
1.2 you will get updated utils/model_loader.py
2. AWS Account
3. AWS IAM User
3.1 fetch the credential from the IAM USER: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
3.2 these credential keep inside your GitHub secretes
4. AWS Secrete Manager: keep your API keys over there
5. Setup your ECR
6. Create Cluster on your ECS
7. add the policy(incline_policy) either inside your IAM user or inside the role
7.1 these is a custom policy for giving correct permission between services 
7.2 check the code folder there i have given incline policy json file
7.3 there is two policy
7.4 first create first policy then create second policy with the appropriate given name and the exact json 
8. go inside the EC2 and add your inbould details
open EC2-> left hand side check with the security group-> click on security group id then add the inbound rule
TYPE Custom TCP TCP8080 ANYWHERE IPV4 0.0.0.0/0
9. for accessing the application 
ECS CLuster->Service->Task->PublicIP
if you are not able to get public IP there
then click on the ENI id there check with your public IPV4 Address

for executing the application this should be running on your browswer
http:/<your_public_ip>:8080

10 how to watch the logs
search for cloud watch->click on log groups --> check with your running task id --> then open the log for the same task id